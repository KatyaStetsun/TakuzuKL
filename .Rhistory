labs(title = "Simulation of Inventory Management",
x = "Time",
y = "Value",
color = "Legend") +
theme_minimal()
sim_traj<-function() {
X <- x0
traj<- numeric(N)
rewards<- numeric(N)
for (t in 1:N) {
A <- M - X
D <- rpois(1, lambda_P)
x_n <- max(0, X + A - D)
r <-(-alpha) * A +(- gamma) * max(0, D - X - A)
traj[t] <- x_n
rewards[t] <- r
X <- x_n
}
return(list(traj=traj,total_reward = sum(rewards)))
}
set.seed(123)
num_traj_s <- 3
trajectories <- replicate(num_traj_s, sim_traj(), simplify = FALSE)
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
ggplot(df, aes(x = time, y = stock, color = factor(traj_id))) +
geom_line(size = 1) +
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible",
color = "Trajectoire") +
theme_minimal()
runs <- 1000
total_rewards <- sapply(1:runs, function(i) sim_traj()$total_reward)
mean_r <- mean(total_rewards)
# Стандартное отклонение
std_dev <- sd(total_rewards)
# Критическое значение для 95% доверительного интервала
z <- qnorm(0.975)
# Расчет доверительного интервала
ci_lower <- mean_r - z * (std_dev / sqrt(runs))
ci_upper <- mean_r + z * (std_dev / sqrt(runs))
cat("Le gain moyen de la politique π1:", mean_r, "\n")
cat("Intervalle de confiance à 95%: [", ci_lower, ",", ci_upper, "]\n")
# Создаем data.frame для визуализации
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
# Визуализация траекторий
ggplot(df, aes(x = time, y = stock, color = factor(traj_id))) +
geom_line(size = 1) +
geom_hline(yintercept = M, linetype = "dashed", color = "red", size = 1) +  # Линия для максимальной вместимости
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible",
color = "Trajectoire") +
theme_minimal()
# Создаем data.frame для визуализации
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
# Визуализация траекторий
ggplot(df, aes(x = time, y = stock, color = factor(traj_id))) +
geom_line(size = 1) +
geom_hline(yintercept = M, linetype = "dashed", color = "red", size = 1) +  # Линия для максимальной вместимости
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible",
color = "Trajectoire") +
theme_minimal()
# Расчет среднего и стандартного отклонения для каждого момента времени
df_summary <- df %>%
group_by(time) %>%
summarise(
mean_stock = mean(stock),
sd_stock = sd(stock),
ci_lower = mean_stock - qnorm(0.975) * (sd_stock / sqrt(num_traj_s)),
ci_upper = mean_stock + qnorm(0.975) * (sd_stock / sqrt(num_traj_s))
)
library(dplyr)  # Подключение библиотеки dplyr
library(tidyverse)  # Подключение библиотеки tidyverse
# Расчет среднего и стандартного отклонения для каждого момента времени
df_summary <- df %>%
group_by(time) %>%
summarise(
mean_stock = mean(stock),
sd_stock = sd(stock),
ci_lower = mean_stock - qnorm(0.975) * (sd_stock / sqrt(num_traj_s)),
ci_upper = mean_stock + qnorm(0.975) * (sd_stock / sqrt(num_traj_s))
)
# Визуализация с доверительным интервалом
ggplot(df_summary, aes(x = time, y = mean_stock)) +
geom_line(size = 1, color = "blue") +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.2, fill = "blue") +  # Доверительный интервал
geom_hline(yintercept = M, linetype = "dashed", color = "red", size = 1) +  # Линия для максимальной вместимости
labs(title = "Trajectoires de gestion de stock (Politique π1) avec intervalle de confiance",
x = "Temps",
y = "Stock disponible moyen") +
theme_minimal()
runs <- 1000
total_rewards <- sapply(1:runs, function(i) sim_traj()$total_reward)
mean_r <- mean(total_rewards)
# Стандартное отклонение
std_dev <- sd(total_rewards)
# Критическое значение для 95% доверительного интервала
z <- qnorm(0.975)
# Расчет доверительного интервала
ci_lower <- mean_r - z * (std_dev / sqrt(runs))
ci_upper <- mean_r + z * (std_dev / sqrt(runs))
cat("Le gain moyen de la politique π1:", mean_r, "\n")
cat("Intervalle de confiance à 95%: [", ci_lower, ",", ci_upper, "]\n")
set.seed(123)
num_traj_s <- 6
trajectories <- replicate(num_traj_s, pi_1(), simplify = FALSE)
pi_1<-function() {
X <- x0
traj<- numeric(N)
rewards<- numeric(N)
for (t in 1:N) {
A <- M - X
D <- rpois(1, lambda_P)
x_n <- max(0, X + A - D)
r <-(-alpha) * A +(- gamma) * max(0, D - X - A)
traj[t] <- x_n
rewards[t] <- r
X <- x_n
}
return(list(traj=traj,total_reward = sum(rewards)))
}
set.seed(123)
num_traj_s <- 6
trajectories <- replicate(num_traj_s, pi_1(), simplify = FALSE)
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
ggplot(df, aes(x = time, y = stock, color = factor(traj_id))) +
geom_line(size = 1) +
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible",
color = "Trajectoire") +
theme_minimal()
set.seed(123)
num_traj_s <- 3
trajectories <- replicate(num_traj_s, pi_1(), simplify = FALSE)
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
ggplot(df, aes(x = time, y = stock, color = factor(traj_id))) +
geom_line(size = 1) +
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible",
color = "Trajectoire") +
theme_minimal()
# Создаем data.frame для визуализации
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
# Визуализация с раздельными графиками для каждой траектории
ggplot(df, aes(x = time, y = stock)) +
geom_line(size = 1, color = "blue") +  # Линия для уровня запасов
facet_wrap(~ traj_id, ncol = 1) +  # Разделение на отдельные графики по traj_id
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible") +
theme_minimal()
# Создаем data.frame для визуализации
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
# Визуализация с раздельными графиками для каждой траектории
plot(df, aes(x = time, y = stock)) +
geom_line(size = 1, color = "blue") +  # Линия для уровня запасов
facet_wrap(~ traj_id, ncol = 1) +  # Разделение на отдельные графики по traj_id
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible") +
theme_minimal()
# Создаем data.frame для визуализации
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
# Визуализация с раздельными графиками для каждой траектории
ggplot(df, aes(x = time, y = stock)) +
geom_line(size = 1, color = "blue") +  # Линия для уровня запасов
facet_wrap(~ traj_id, ncol = 1) +  # Разделение на отдельные графики по traj_id
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible") +
theme_minimal()
# Расчет среднего и стандартного отклонения для каждого момента времени
df_summary <- df %>%
group_by(time) %>%
summarise(
mean_stock = mean(stock),
sd_stock = sd(stock),
ci_lower = mean_stock - qnorm(0.975) * (sd_stock / sqrt(num_traj_s)),
ci_upper = mean_stock + qnorm(0.975) * (sd_stock / sqrt(num_traj_s))
)
# Создаем отдельные графики с доверительным интервалом
par(mfrow = c(num_traj_s, 1))
for (i in 1:num_traj_s) {
# Фильтруем данные для текущей траектории
df_subset <- df %>% filter(traj_id == i)
# Создаем график
plot(df_subset$time, df_subset$stock,
type = "l", col = "blue", lwd = 2,
main = paste("Trajectoire", i, "de gestion de stock (Politique π1)"),
xlab = "Temps", ylab = "Stock disponible",
ylim = c(0, M))
# Добавляем доверительный интервал
polygon(c(df_summary$time, rev(df_summary$time)),
c(df_summary$ci_lower, rev(df_summary$ci_upper)),
col = rgb(0, 0, 1, 0.2), border = NA)  # Полупрозрачная синяя область
}
runs <- 1000
total_rewards <- sapply(1:runs, function(i) pi_1()$total_reward)
mean_r <- mean(total_rewards)
# Стандартное отклонение
std_dev <- sd(total_rewards)
# Критическое значение для 95% доверительного интервала
z <- qnorm(0.975)
# Расчет доверительного интервала
ci_lower <- mean_r - z * (std_dev / sqrt(runs))
ci_upper <- mean_r + z * (std_dev / sqrt(runs))
cat("Le gain moyen de la politique π1:", mean_r, "\n")
cat("Intervalle de confiance à 95%: [", ci_lower, ",", ci_upper, "]\n")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
#horizon
N<-20
#capasite max
M<-9
#etat se stock initial
x0<-9
#loi de Poisson
lambda_P<-3
#cout de restokage
alpha<-1
#cout de la demande insatisfaite
gamma<-2
# Функция для моделирования спроса
simulate_demand <- function(lambda) {
return(rpois(1, lambda))
}
# Функция для обновления состояния склада
update_state <- function(x, a, D) {
return(max(0, x + a - D))
}
# Функция для расчета награды
calculate_reward <- function(a, D, x) {
return(-alpha * a - gamma * max(0, D - x - a))
}
# Инициализация переменных
X <- numeric(N + 1)
Actions <- numeric(N)
rewards <- numeric(N)
X[1] <- x0
# Моделирование траектории
for (t in 1:N) {
# Моделирование спроса
D <- simulate_demand(lambda_P)
# Выбор действия (пополнение запасов)
a <- max(0, M - X[t])
# Обновление состояния
X[t + 1] <- update_state(X[t], a, D)
# Расчет награды
rewards[t] <- calculate_reward(a, D, X[t])
# Сохранение действия
Actions[t] <- a
}
pi_1<-function() {
X <- x0
traj<- numeric(N)
rewards<- numeric(N)
for (t in 1:N) {
A <- M - X
D <- rpois(1, lambda_P)
x_n <- max(0, X + A - D)
r <-(-alpha) * A +(- gamma) * max(0, D - X - A)
traj[t] <- x_n
rewards[t] <- r
X <- x_n
}
return(list(traj=traj,total_reward = sum(rewards)))
}
set.seed(123)
num_traj_s <- 3
trajectories <- replicate(num_traj_s, pi_1(), simplify = FALSE)
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
ggplot(df, aes(x = time, y = stock, color = factor(traj_id))) +
geom_line(size = 1) +
labs(title = "Politique π1",
x = "Temps",
y = "Stock disponible",
color = "Trajectoire") +
theme_minimal()
# Расчет среднего и стандартного отклонения для каждого момента времени
df_summary <- df %>%
group_by(time) %>%
summarise(
mean_stock = mean(stock),
sd_stock = sd(stock),
ci_lower = mean_stock - qnorm(0.975) * (sd_stock / sqrt(num_traj_s)),
ci_upper = mean_stock + qnorm(0.975) * (sd_stock / sqrt(num_traj_s))
)
# Визуализация с доверительным интервалом
ggplot(df_summary, aes(x = time, y = mean_stock)) +
geom_line(size = 1, color = "blue") +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper), alpha = 0.2, fill = "blue") +  # Доверительный интервал
geom_hline(yintercept = M, linetype = "dashed", color = "red", size = 1) +  # Линия для максимальной вместимости
labs(title = "Trajectoires de gestion de stock (Politique π1) avec intervalle de confiance",
x = "Temps",
y = "Stock disponible moyen") +
theme_minimal()
# Создаем data.frame для визуализации
df <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
# Визуализация с раздельными графиками для каждой траектории
ggplot(df, aes(x = time, y = stock)) +
geom_line(size = 1, color = "blue") +  # Линия для уровня запасов
facet_wrap(~ traj_id, ncol = 1) +  # Разделение на отдельные графики по traj_id
labs(title = "Trajectoires de gestion de stock (Politique π1)",
x = "Temps",
y = "Stock disponible") +
theme_minimal()
runs <- 1000
total_rewards <- sapply(1:runs, function(i) pi_1()$total_reward)
mean_r <- mean(total_rewards)
# Стандартное отклонение
std_dev <- sd(total_rewards)
# Критическое значение для 95% доверительного интервала
z <- qnorm(0.975)
# Расчет доверительного интервала
ci_lower <- mean_r - z * (std_dev / sqrt(runs))
ci_upper <- mean_r + z * (std_dev / sqrt(runs))
cat("Le gain moyen de la politique π1:", mean_r, "\n")
cat("Intervalle de confiance à 95%: [", ci_lower, ",", ci_upper, "]\n")
pi_2 <- function() {
X <- x0
traj<- numeric(N)
rewards<- numeric(N)
for (t in 1:N) {
if (X == 0) {A <- M} else {A <- 0}
D <- rpois(1, lambda_P)
x_n <- max(0, X + A - D)
r <-(-alpha) * A +(- gamma) * max(0, D - X - A)
traj[t] <- x_n
rewards[t] <- r
x <- x_n
}
return(list(traj=traj,total_reward=sum(rewards)))
}
set.seed(123)
num_traj_s <- 3
trajectories_2 <- replicate(num_traj_s, pi_2(), simplify = FALSE)
runs <- 1000
total_rewards_2 <- sapply(1:runs, function(i) pi_2()$total_reward)
mean_r <- mean(total_rewards_2)
# Стандартное отклонение
std_dev <- sd(total_rewards)
# Критическое значение для 95% доверительного интервала
z <- qnorm(0.975)
# Расчет доверительного интервала
ci_lower <- mean_r - z * (std_dev / sqrt(runs))
ci_upper <- mean_r + z * (std_dev / sqrt(runs))
cat("Le gain moyen de la politique π1:", mean_r, "\n")
cat("Intervalle de confiance à 95%: [", ci_lower, ",", ci_upper, "]\n")
runs <- 1000
total_rewards_2 <- sapply(1:runs, function(i) pi_2()$total_reward)
mean_r <- mean(total_rewards_2)
# Стандартное отклонение
std_dev <- sd(total_rewards)
# Критическое значение для 95% доверительного интервала
z <- qnorm(0.975)
# Расчет доверительного интервала
ci_lower <- mean_r - z * (std_dev / sqrt(runs))
ci_upper <- mean_r + z * (std_dev / sqrt(runs))
cat("Le gain moyen de la politique π2:", mean_r, "\n")
cat("Intervalle de confiance à 95%: [", ci_lower, ",", ci_upper, "]\n")
pi_3 <- function() {
X <- x0
traj<- numeric(N)
rewards<- numeric(N)
for (t in 1:N) {
if (X < M) {A <- 1} else {A <- 0}
D <- rpois(1, lambda_P)
x_n <- max(0, X + A - D)
r <- (-alpha) * A + (-gamma) * max(0, D - X - A)
traj[t] <- x_n
rewards[t] <- r
x <- x_n
}
return(list(traj=traj,total_reward=sum(rewards)))
}
set.seed(123)
num_traj_s <- 3
trajectories_3 <- replicate(num_traj_s, pi_3(), simplify = FALSE)
# Подготовка данных для графика
df_p3 <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories_p3, function(traj) traj$trajectory)),
traj_id = rep(1:num_traj_s, each = N)
)
set.seed(123)
num_traj_s <- 3
trajectories_3 <- replicate(num_traj_s, pi_3(), simplify = FALSE)
# Подготовка данных для графика
df_p3 <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories_p3, function(traj) traj$trajectory)),
traj_id = rep(1:num_traj_s, each = N)
)
# Подготовка данных для графика
df_p3 <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories_3, function(traj) traj$trajectory)),
traj_id = rep(1:num_traj_s, each = N)
)
df_p2 <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories_2, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
ggplot(df_p2, aes(x = time, y = stock, color = factor(traj_id))) +
geom_line(size = 1) +
labs(title = "La trajectoire contrôlée par la Politique π2",
x = "Temps",
y = "Stock disponible",
color = "Trajectoire") +
theme_minimal()
runs <- 1000
total_rewards_2 <- sapply(1:runs, function(i) pi_2()$total_reward)
mean_r <- mean(total_rewards_2)
# Стандартное отклонение
std_dev <- sd(total_rewards)
# Критическое значение для 95% доверительного интервала
z <- qnorm(0.975)
# Расчет доверительного интервала
ci_lower <- mean_r - z * (std_dev / sqrt(runs))
ci_upper <- mean_r + z * (std_dev / sqrt(runs))
cat("Le gain moyen de la politique π2:", mean_r, "\n")
cat("Intervalle de confiance à 95%: [", ci_lower, ",", ci_upper, "]\n")
pi_3 <- function() {
X <- x0
traj<- numeric(N)
rewards<- numeric(N)
for (t in 1:N) {
if (X < M) {A <- 1} else {A <- 0}
D <- rpois(1, lambda_P)
x_n <- max(0, X + A - D)
r <- (-alpha) * A + (-gamma) * max(0, D - X - A)
traj[t] <- x_n
rewards[t] <- r
x <- x_n
}
return(list(traj=traj,total_reward=sum(rewards)))
}
set.seed(123)
num_traj_s <- 3
trajectories_3 <- replicate(num_traj_s, pi_3(), simplify = FALSE)
# Подготовка данных для графика
df_p3 <- data.frame(
time = rep(1:N, num_traj_s),
stock = unlist(lapply(trajectories_3, function(traj) traj$traj)),
traj_id = rep(1:num_traj_s, each = N)
)
ggplot(df_p3, aes(x = time, y = stock, color = factor(traj_id))) +
geom_line(size = 1) +
labs(title = "La trajectoire contrôlée par la Politique π3",
x = "Temps",
y = "Stock disponible",
color = "Trajectoire") +
theme_minimal()
runs <- 1000
total_rewards_3 <- sapply(1:runs, function(i) pi_3()$total_reward)
mean_r <- mean(total_rewards_2)
# Стандартное отклонение
std_dev <- sd(total_rewards)
# Критическое значение для 95% доверительного интервала
z <- qnorm(0.975)
# Расчет доверительного интервала
ci_lower <- mean_r - z * (std_dev / sqrt(runs))
ci_upper <- mean_r + z * (std_dev / sqrt(runs))
cat("Le gain moyen de la politique π2:", mean_r, "\n")
cat("Intervalle de confiance à 95%: [", ci_lower, ",", ci_upper, "]\n")
