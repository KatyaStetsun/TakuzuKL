req(game_data$grid)
n <- nrow(game_data$grid) # Get grid size
tagList(
div(class = "game-container",
div(class = "difficulty-img-container",
img(src = switch(input$difficulty,
"Easy" = "easy_mode.png",
"Medium" = "medium_mode.png",
"Hard" = "hard_mode.png"),
class = "difficulty-img")
),
div(class = "game-grid",
do.call(tagList, lapply(1:n, function(i) {
div(class = "grid-row",
lapply(1:n, function(j) {
btn_id <- paste0("cell_", i, "_", j)
value <- game_data$grid[i, j]
actionButton(btn_id, label = ifelse(value == 2, "", value),
class = ifelse(value == 2, "cell-editable", "cell-fixed"),
disabled = (value != 2))
})
)
}))
),
div(class = "game-btn-container",
actionButton("check_solution", "CHECK", class = "btn btn-custom"),
actionButton("return_to_menu", "QUIT", class = "btn btn-custom")
)
)
)
})
# Handle Game Start
observeEvent(input$start_game, {
grid_size <- as.integer(strsplit(input$board_size, "x")[[1]][1])
grid_name <- paste0("grids_", grid_size)
chosen_grid <- as.matrix(sample(grids[[grid_name]], 1)[[1]])
game_data$solution <- chosen_grid
difficulty_level <- switch(input$difficulty,
"Easy" = 1,
"Medium" = 2,
"Hard" = 3)
game_data$grid <- hide_by_difficulty(difficulty_level, chosen_grid)
shinyjs::hide("choose_ui")
shinyjs::show("game_ui")
})
# Handle Clicks on Editable Cells
observe({
req(game_data$grid)
n <- nrow(game_data$grid)
for (i in 1:n) {
for (j in 1:n) {
btn_id <- paste0("cell_", i, "_", j)
if (game_data$grid[i, j] == 2) {
observeEvent(input[[btn_id]], {
current_val <- game_data$grid[i, j]
new_val <- switch(as.character(current_val),
"2" = 1,  # Blank (2) → 1
"1" = 0,  # 1 → 0
"0" = 2)  # 0 → Blank (2)
game_data$grid[i, j] <- new_val
updateActionButton(session, btn_id, label = ifelse(new_val == 2, "", new_val))
}, ignoreInit = TRUE, ignoreNULL = TRUE)
}
}
}
})
# Handle Solution Check
observeEvent(input$check_solution, {
req(game_data$grid, game_data$solution)
if (all(game_data$grid == game_data$solution)) {
shinyjs::hide("game_ui")
shinyjs::show("victory_ui")
} else {
showModal(modalDialog(
title = "Incorrect",
"The grid is not solved correctly. Keep trying!",
easyClose = TRUE
))
}
})
# Victory UI
output$victory_ui <- renderUI({
req(game_data$grid)
tagList(
div(class = "victory-message",
h3("Congratulations! You solved the puzzle!"),
actionButton("return_to_menu_victory", "RETURN TO MENU", class = "btn btn-custom")
)
)
})
# Handle UI Navigation
observeEvent(input$return_to_menu_victory, {
shinyjs::hide("victory_ui")
shinyjs::show("choose_ui")
})
observeEvent(input$return_to_menu, {
shinyjs::hide("game_ui")
shinyjs::show("choose_ui")
})
observeEvent(input$exit, {
stopApp()
})
}
shinyApp(ui, server)
runApp()
runApp('R/test.R')
runApp()
runApp('R/test.R')
runApp('R/test.R')
runApp('R/test.R')
runApp('R/test.R')
runApp('R/test.R')
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css") # Link to the CSS file
),
div(class = "game-container",
div(class = "difficulty-img-container",
img(src = "difficulty.png", class = "difficulty-img") # Background Image (Replace later)
),
div(class = "game-grid",
# Generate a sample 6x6 grid (modify dynamically later)
lapply(1:6, function(i) {
div(class = "row",
lapply(1:6, function(j) {
# Example: Some cells are locked, others editable
if (sample(c(TRUE, FALSE), 1)) {
div(class = "cell-fixed", "1") # Locked cell
} else {
actionButton(inputId = paste0("cell_", i, "_", j), label = "", class = "cell-editable")
}
})
)
})
),
div(class = "game-btn-container",
actionButton("check_btn", "CHECK", class = "btn-custom"),
actionButton("quit_btn", "QUIT", class = "btn-custom")
)
)
uiOutput("welcome_ui"),
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css") # Link to the CSS file
),
div(class = "game-container",
div(class = "difficulty-img-container",
img(src = "difficulty.png", class = "difficulty-img") # Background Image (Replace later)
),
div(class = "game-grid",
# Generate a sample 6x6 grid (modify dynamically later)
lapply(1:6, function(i) {
div(class = "row",
lapply(1:6, function(j) {
# Example: Some cells are locked, others editable
if (sample(c(TRUE, FALSE), 1)) {
div(class = "cell-fixed", "1") # Locked cell
} else {
actionButton(inputId = paste0("cell_", i, "_", j), label = "", class = "cell-editable")
}
})
)
})
),
div(class = "game-btn-container",
actionButton("check_btn", "CHECK", class = "btn-custom"),
actionButton("quit_btn", "QUIT", class = "btn-custom")
)
)
uiOutput("welcome_ui"),
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css") # Link to the CSS file
),
div(class = "game-container",
div(class = "difficulty-img-container",
img(src = "difficulty.png", class = "difficulty-img") # Background Image (Replace later)
),
div(class = "game-grid",
# Generate a sample 6x6 grid (modify dynamically later)
lapply(1:6, function(i) {
div(class = "row",
lapply(1:6, function(j) {
# Example: Some cells are locked, others editable
if (sample(c(TRUE, FALSE), 1)) {
div(class = "cell-fixed", "1") # Locked cell
} else {
actionButton(inputId = paste0("cell_", i, "_", j), label = "", class = "cell-editable")
}
})
)
})
),
div(class = "game-btn-container",
actionButton("check_btn", "CHECK", class = "btn-custom"),
actionButton("quit_btn", "QUIT", class = "btn-custom")
)
),
uiOutput("welcome_ui"),
uiOutput("choose_ui"),
uiOutput("rules_ui"),
uiOutput("game_ui"),
uiOutput("victory_ui")
)
library(shiny)
library(shinyjs)
library(TakuzuKL)
#grids <- dl_csv()
ui <- fluidPage(
useShinyjs(),
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css") # Link to the CSS file
),
div(class = "game-container",
div(class = "difficulty-img-container",
img(src = "difficulty.png", class = "difficulty-img") # Background Image (Replace later)
),
div(class = "game-grid",
# Generate a sample 6x6 grid (modify dynamically later)
lapply(1:6, function(i) {
div(class = "row",
lapply(1:6, function(j) {
# Example: Some cells are locked, others editable
if (sample(c(TRUE, FALSE), 1)) {
div(class = "cell-fixed", "1") # Locked cell
} else {
actionButton(inputId = paste0("cell_", i, "_", j), label = "", class = "cell-editable")
}
})
)
})
),
div(class = "game-btn-container",
actionButton("check_btn", "CHECK", class = "btn-custom"),
actionButton("quit_btn", "QUIT", class = "btn-custom")
)
),
uiOutput("welcome_ui"),
uiOutput("choose_ui"),
uiOutput("rules_ui"),
uiOutput("game_ui"),
uiOutput("victory_ui")
)
server <- function(input, output, session) {
game_data <- reactiveValues(grid = NULL, solution = NULL, observed = FALSE)
# Welcome UI
output$welcome_ui <- renderUI({
tagList(
img(src = "title.png", class = "title-img"),
div(class = "btn-container",
actionButton("play", "PLAY", class = "btn btn-custom"),
actionButton("how_to_play", "HOW TO PLAY?", class = "btn btn-custom"),
actionButton("exit", "EXIT", class = "btn btn-custom")
)
)
})
# Rules UI
output$rules_ui <- renderUI({
tagList(
div(class = "rules-container",
img(src = "rules.png", class = "rules-img"), # TO TEST
actionButton("return_from_rules", "RETURN", class = "btn btn-custom")
)
)
})
# Choose Board UI
output$choose_ui <- renderUI({
tagList(
div(class = "panel-custom",
radioButtons("board_size", "Choose Board Size:",
choices = c("4x4", "6x6", "8x8"),
selected = "6x6"),
radioButtons("difficulty", "Choose Difficulty Level:",
choices = c("Easy", "Medium", "Hard"),
selected = "Medium")
),
div(class = "button-container",
actionButton("start_game", "START GAME", class = "btn btn-custom"),
actionButton("return", "RETURN", class = "btn btn-custom")
)
)
})
# Game UI (renders grid dynamically)
output$game_ui <- renderUI({
req(game_data$grid)
n <- nrow(game_data$grid) # Get grid size
tagList(
div(class = "game-container",
div(class = "difficulty-img-container",
img(src = switch(input$difficulty,
"Easy" = "easy_mode.png",
"Medium" = "medium_mode.png",
"Hard" = "hard_mode.png"),
class = "difficulty-img")
),
div(class = "game-grid",
do.call(tagList, lapply(1:n, function(i) {
div(class = "grid-row",
lapply(1:n, function(j) {
btn_id <- paste0("cell_", i, "_", j)
value <- game_data$grid[i, j]
actionButton(
btn_id,
label = ifelse(value == 2, "", value),
class = ifelse(value == 2, "cell-editable", "cell-fixed") # Editable only if value is 2
)
})
)
}))
),
div(class = "game-btn-container",
actionButton("check_solution", "CHECK", class = "btn btn-custom"),
actionButton("return_to_menu", "QUIT", class = "btn btn-custom")
)
)
)
})
# Handle Game Start
observeEvent(input$start_game, {
grid_size <- as.integer(strsplit(input$board_size, "x")[[1]][1])
grid_name <- paste0("grids_", grid_size)
chosen_grid <- as.matrix(sample(grids[[grid_name]], 1)[[1]])
game_data$solution <- chosen_grid
difficulty_level <- switch(input$difficulty,
"Easy" = 1,
"Medium" = 2,
"Hard" = 3)
game_data$grid <- hide_by_difficulty(difficulty_level, chosen_grid)
shinyjs::hide("choose_ui")
shinyjs::show("game_ui")
})
# Handle Clicks on Editable Cells
observe({
req(game_data$grid)
n <- nrow(game_data$grid)
for (i in seq_len(n)) {
for (j in seq_len(n)) {
if (game_data$grid[i, j] == 2) {  # Only listen for changes in editable cells
local({
ii <- i
jj <- j
btn_id <- paste0("cell_", ii, "_", jj)
observeEvent(input[[btn_id]], {
new_val <- switch(as.character(game_data$grid[ii, jj]),
"2" = 1,  # Blank (2) → 1
"1" = 0,  # 1 → 0
"0" = 2)  # 0 → Blank (2)
game_data$grid[ii, jj] <- new_val
# Ensure the cell remains interactive
updateActionButton(session, btn_id,
label = ifelse(new_val == 2, "", new_val))
}, ignoreInit = TRUE, ignoreNULL = TRUE)
})
}
}
}
})
# Handle Solution Check
observeEvent(input$check_solution, {
req(game_data$grid, game_data$solution)
if (all(game_data$grid == game_data$solution)) {
shinyjs::hide("game_ui")
shinyjs::show("victory_ui")
} else {
showModal(modalDialog(
title = "Incorrect",
"The grid is not solved correctly. Keep trying!",
easyClose = TRUE
))
}
})
# Victory UI
output$victory_ui <- renderUI({
req(game_data$grid)
tagList(
div(class = "victory-message",
h3("Congratulations! You solved the puzzle!"),
actionButton("return_to_menu_victory", "RETURN TO MENU", class = "btn btn-custom")
)
)
})
# Handle UI Navigation
shinyjs::hide("choose_ui")
shinyjs::hide("rules_ui")
shinyjs::hide("game_ui")
shinyjs::hide("victory_ui")
observeEvent(input$play, {
shinyjs::hide("welcome_ui")
shinyjs::show("choose_ui")
})
observeEvent(input$how_to_play, {
shinyjs::hide("welcome_ui")
shinyjs::show("rules_ui")
})
observeEvent(input$return, {
shinyjs::hide("choose_ui")
shinyjs::show("welcome_ui")
})
observeEvent(input$return_from_rules, {
shinyjs::hide("rules_ui")
shinyjs::show("welcome_ui")
})
observeEvent(input$return_to_menu_victory, {
shinyjs::hide("victory_ui")
shinyjs::show("choose_ui")
})
observeEvent(input$return_to_menu, {
shinyjs::hide("game_ui")
shinyjs::show("choose_ui")
})
observeEvent(input$exit, {
stopApp()
})
}
shinyApp(ui, server)
library(shiny)
# Define UI
ui <- fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css") # Link to external CSS
),
div(class = "game-container",
# Background difficulty image (Replace later)
div(class = "difficulty-img-container",
img(src = "difficulty.png", class = "difficulty-img")
),
# Takuzu Grid
div(class = "game-grid",
lapply(1:6, function(i) {
div(class = "row",
lapply(1:6, function(j) {
# Example: Some cells are locked (preset 0s and 1s), others editable
if (sample(c(TRUE, FALSE), 1)) {
div(class = "cell-fixed", sample(c("0", "1"), 1)) # Locked cell
} else {
actionButton(inputId = paste0("cell_", i, "_", j), label = "", class = "cell-editable")
}
})
)
})
),
# Buttons (Check and Quit)
div(class = "game-btn-container",
actionButton("check_btn", "CHECK", class = "btn-custom"),
actionButton("quit_btn", "QUIT", class = "btn-custom")
)
)
)
# Define Server Logic
server <- function(input, output, session) {
# Toggle between 0 and 1 when clicking editable cells
observe({
for (i in 1:6) {
for (j in 1:6) {
cell_id <- paste0("cell_", i, "_", j)
observeEvent(input[[cell_id]], {
current_label <- isolate(input[[cell_id]])
new_label <- ifelse(current_label == "1", "0", "1")
updateActionButton(session, cell_id, label = new_label)
})
}
}
})
}
# Run App
shinyApp(ui, server)
runApp('R/test.R')
runApp('R/test2.R')
runApp('R/test2.R')
runApp('R/test2.R')
runApp('R/test2.R')
runApp('R/test2.R')
runApp()
runApp('R/test2.R')
runApp('R/test2.R')
runApp('R/test.R')
runApp('R/test.R')
runApp()
runApp('R/test.R')
runApp('R/test.R')
runApp('R/test.R')
runApp()
runApp('R/test2.R')
runApp('R/test.R')
runApp()
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp()
runApp('test.R')
runApp('test.R')
runApp()
runApp()
runApp()
