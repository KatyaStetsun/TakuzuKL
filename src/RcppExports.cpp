// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_difficulty_params
List get_difficulty_params(std::string difficulty);
RcppExport SEXP _TakuzuKL_get_difficulty_params(SEXP difficultySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type difficulty(difficultySEXP);
    rcpp_result_gen = Rcpp::wrap(get_difficulty_params(difficulty));
    return rcpp_result_gen;
END_RCPP
}
// generate_takuzu
IntegerMatrix generate_takuzu(int n, double fill_percentage, bool chaotic);
RcppExport SEXP _TakuzuKL_generate_takuzu(SEXP nSEXP, SEXP fill_percentageSEXP, SEXP chaoticSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type fill_percentage(fill_percentageSEXP);
    Rcpp::traits::input_parameter< bool >::type chaotic(chaoticSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_takuzu(n, fill_percentage, chaotic));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TakuzuKL_get_difficulty_params", (DL_FUNC) &_TakuzuKL_get_difficulty_params, 1},
    {"_TakuzuKL_generate_takuzu", (DL_FUNC) &_TakuzuKL_generate_takuzu, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_TakuzuKL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
